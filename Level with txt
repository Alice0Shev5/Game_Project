class Level_1(Level):
    def __init__(self, player):
        # Вызываем родительский конструктор
        Level.__init__(self, player)

        # Массив с данными про платформы. Данные в таком формате:
        # ширина, высота, x и y позиция

        # Перебираем массив и добавляем каждую платформу в группу спрайтов - platform_list
        for platform in L1:
            block = Platform(platform[0], platform[1])
            block.rect.x = platform[2]
            block.rect.y = platform[3]
            block.player = self.player
            self.platform_list.add(block)


def load_level(filename):
    filename = "data/" + filename
    # читаем уровень, убирая символы перевода строки
    with open(filename, 'r') as mapFile:
        level_map = [line.strip() for line in mapFile]

    # и подсчитываем максимальную длину
    max_width = max(map(len, level_map))

    # дополняем каждую строку пустыми клетками ('.')
    return list(map(lambda x: x.ljust(max_width, '.'), level_map))


def generate_level(level):
    level1 = []
    x1, y1 = 10, 10
    for y in range(len(level)):
        y1 += 470
        for x in range(len(level[y])):
            x1 += 50
            if level[y][x] == '.':
                pass
            elif level[y][x] == '#':
                print(x1, y1)
                level1.append([210, 32, x1, y1])
            elif level[y][x] == '@':
                pass
    print(level1)
    # вернем игрока, а также размер поля в клетках
    return level1


level_map = load_level('pole_for_game.txt')
L1 = generate_level(level_map)
print(L1)
